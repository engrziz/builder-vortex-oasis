import { RequestHandler } from "express";
import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize Gemini client only when needed to avoid build-time errors
let genAI: GoogleGenerativeAI | null = null;

const getGeminiClient = (): GoogleGenerativeAI => {
  if (!genAI) {
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
  }
  return genAI;
};

const SYSTEM_PROMPT = `ุฃูุช ูุณุงุนุฏ ุฐูู ูุชุฎุตุต ูู ุชุนููู ุงูุฃุทูุงู ุนู ุงูุฃููุงู ูุงูุฃุณูู ูุงูุงุณุชุซูุงุฑ ุจุงููุบุฉ ุงูุนุฑุจูุฉ. 

ููุงุนุฏ ูููุฉ:
1. ุชุญุฏุซ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู ุงูุจุณูุทุฉ ูุงููุงุถุญุฉ ููุฃุทูุงู
2. ุงุณุชุฎุฏู ุฃูุซูุฉ ููุงุณุจุฉ ููุฃุทูุงู ูุชุดุจููุงุช ูู ุญูุงุชูู ุงูููููุฉ
3. ุงุณุชุฎุฏู ุงูุฑููุฒ ุงูุชุนุจูุฑูุฉ ูุฌุนู ุงูุฅุฌุงุจุงุช ููุชุนุฉ ๐๐๐ฐ
4. ุฑูุฒ ููุท ุนูู ููุถูุน ุงููุงู ูุงูุฃุณูู ูุงูุงุณุชุซูุงุฑ ูุงูุงุฏุฎุงุฑ
5. ุฅุฐุง ุณูุฆูุช ุนู ููุถูุน ุฎุงุฑุฌ ูุทุงู ุงูุฃููุงูุ ุฃุนุฏ ุงูุณุคุงู ุจูุทู ุฅูู ุงูููุถูุน ุงููุงูู
6. ุงุฌุนู ุงูุฅุฌุงุจุงุช ูุตูุฑุฉ ููููููุฉ (3-4 ุฌูู ูุญุฏ ุฃูุตู)
7. ุดุฌุน ุงูุฃุทูุงู ุนูู ุงูุงุฏุฎุงุฑ ูุงูุชูููุฑ ุงูุฅูุฌุงุจู ูุญู ุงููุงู

ูุซุงู ุนูู ุฅุฌุงุจุงุชู:
- ุงูุฃุณูู ูุซู ูุทุน ุงูุฃุญุฌูุฉ ูู ุงูุดุฑูุงุช ุงููุจูุฑุฉ! ๐งฉ
- ุงูุงุฏุฎุงุฑ ูุซู ุฒุฑุงุนุฉ ุงูุจุฐูุฑ ุงูุชู ุชููู ูุน ุงูููุช! ๐ฑ
- ุงููุงู ุฃุฏุงุฉ ูููุฏุฉ ูุชุญููู ุฃุญูุงููุง! โจ

ูู ูุฏูุฏุงู ููุดุฌุนุงู ููุชุญูุณุงู ูุชุนููู ุงูุฃุทูุงู!`;

export interface ChatRequest {
  message: string;
  conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string }>;
}

export interface ChatResponse {
  response: string;
  error?: string;
}

export const handleAIChat: RequestHandler = async (req, res) => {
  try {
    const { message, conversationHistory = [] }: ChatRequest = req.body;

    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({ 
        error: "ููุชุงุญ Gemini API ุบูุฑ ููุนุฑูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ",
        response: "ุนุฐุฑุงูุ ูุง ูููููู ุงูุฅุฌุงุจุฉ ุงูุขู. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู! ๐"
      });
    }

    if (!message || typeof message !== 'string') {
      return res.status(400).json({ 
        error: "ุงูุฑุณุงูุฉ ูุทููุจุฉ",
        response: "ูุฑุฌู ูุชุงุจุฉ ุณุคุงูู! ๐"
      });
    }

    const genAI = getGeminiClient();
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Build conversation context
    let conversationContext = SYSTEM_PROMPT + "\n\n";
    
    // Add recent conversation history (limit to last 6 messages)
    const recentHistory = conversationHistory.slice(-6);
    for (const msg of recentHistory) {
      if (msg.role === 'user') {
        conversationContext += `ุงููุณุชุฎุฏู: ${msg.content}\n`;
      } else {
        conversationContext += `ุงููุณุงุนุฏ: ${msg.content}\n`;
      }
    }
    
    // Add current user message
    conversationContext += `ุงููุณุชุฎุฏู: ${message}\nุงููุณุงุนุฏ: `;

    const result = await model.generateContent(conversationContext);
    const response = result.response;
    const text = response.text();

    if (!text) {
      throw new Error("No response from Gemini");
    }

    const chatResponse: ChatResponse = { response: text };
    res.json(chatResponse);

  } catch (error) {
    console.error('Gemini API Error:', error);
    
    const fallbackResponse = "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุชููู! ๐ ูู ููููู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑูุ ุฃูุง ููุง ูุฃุนููู ุนู ุงูุฃููุงู ูุงูุฃุณูู! ๐ฐ๐";
    
    res.status(500).json({ 
      error: 'ุฎุทุฃ ูู ุงูุฎุงุฏู',
      response: fallbackResponse
    });
  }
};
